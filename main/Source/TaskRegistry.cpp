//==============================================================================
// Copyright Â© 2019 Sparkwing
//==============================================================================
#include "TaskRegistry.hpp"

#include <cstdio>

#include "FreeRTOS.h"
#include "OsTask.hpp"

//==============================================================================
// Private defines and constants
//==============================================================================

//==============================================================================
// Private typedefs
//==============================================================================

//==============================================================================
// Private variables
//==============================================================================

//==============================================================================
// Private function definitions
//==============================================================================

//==============================================================================
// Public function definitions
//==============================================================================

//------------------------------------------------------------------------------
//
//------------------------------------------------------------------------------
void TaskRegistry::AddTask(OsTask *task)
{
    mTaskList.push_back(task);
}

//------------------------------------------------------------------------------
//
//------------------------------------------------------------------------------
void TaskRegistry::StartTasks()
{
    printf("start task");
#ifdef ESP_PLATFORM
    portMUX_TYPE mux = portMUX_INITIALIZER_UNLOCKED;
    portENTER_CRITICAL(&mux);
#else
    portENTER_CRITICAL();
#endif
    printf("in here\n");
    for (auto task : mTaskList)
    {
        printf("Overall heap remaining: %u\n", xPortGetMinimumEverFreeHeapSize());
        task->StartTask();
    }
#ifdef ESP_PLATFORM
    portEXIT_CRITICAL(&mux);
#else
    portEXIT_CRITICAL();
#endif
}
